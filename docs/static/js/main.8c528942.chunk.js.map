{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputVal","setInputVal","onSubmit","event","preventDefault","trim","length","prevState","style","marginTop","type","value","placeholder","onChange","target","getGifs","category","a","fetch","encodeURI","resp","json","data","gifs","map","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","setImages","useEffect","then","img","useFetchGifs","item","GifApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE5B,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAYA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAMC,iBACFJ,EAASK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAS,OAAMP,GAAN,mBAAmBO,OAC3CN,EAAY,MAKkBO,MAAO,CAACC,UAAW,QAAnD,SACE,uBACEC,KAAK,OACLC,MAAQX,EACRY,YAAY,mBACZC,SAhBe,SAACV,GAAD,OAAWF,EAAYE,EAAMW,OAAOH,a,+BCL9CI,EAAO,uCAAG,WAAQC,GAAR,qBAAAC,EAAA,sEACFC,MAAM,0CAAD,OAA2CC,UAAUH,GAArD,4BAHX,qCAEQ,cACfI,EADe,gBAEEA,EAAKC,OAFP,uBAEbC,EAFa,EAEbA,KACFC,EAAOD,EAAKE,KAAI,YACpB,MAAO,CACLC,GAFiE,EAA5CA,GAGrBC,MAHiE,EAAxCA,MAIzBC,IAJiE,EAAjCC,OAASC,iBAInBF,QAPL,kBAWdJ,GAXc,2CAAH,sDCAPO,EAAc,SAAC,GAAyB,EAAtBL,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IACxC,OACE,sBAAKI,UAAU,2DAAf,UACE,qBAAKC,IAAML,EAAMM,IAAMP,IACvB,4BAAKA,QCFEQ,EAAU,SAAC,GAAoB,IAAjBlB,EAAgB,EAAhBA,SAEzB,ECF0B,SAACA,GAC3B,MAA4BjB,mBAAS,CACnCuB,KAAM,GACNa,SAAS,IAFX,mBAAOP,EAAP,KAAeQ,EAAf,KAeA,OAVAC,qBAAU,WACRtB,EAAQC,GACLsB,MAAM,SAAAC,GACLH,EAAU,CACRd,KAAMiB,EACNJ,SAAS,SAGd,CAACnB,IAEGY,EDd2BY,CAAaxB,GAAjCY,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,sDAAd,SAAsEf,IACrEmB,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAEMH,EAAOJ,KAAK,SAAEiB,GAAF,OACV,cAAC,EAAD,eAEOA,GADCA,EAAKhB,aEeZiB,EA3BA,WAEb,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAIA,OACE,sBAAKiC,UAAU,iBAAf,UACE,qBAAKA,UAAU,SAAf,SACE,2CAEF,cAAC,EAAD,CAAajC,cAAgBA,IAC7B,uBACA,6BAEI6C,EAAWnB,KAAK,SAAEiB,GAAF,OACd,cAAC,EAAD,CAEEzB,SAAWyB,GADLA,YCTLG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8c528942.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n  const [inputVal, setInputVal] = useState('');\n\n  const handleChange = (event) => setInputVal(event.target.value);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if( inputVal.trim().length > 2 ) {\n      setCategories( prevState => [ inputVal, ...prevState ] );\n      setInputVal('');\n    }\n  }\n\n  return (\n    <form onSubmit={ handleSubmit } style={{marginTop: '50px'}}>\n      <input \n        type=\"text\"\n        value={ inputVal }\n        placeholder=\"Search something\"\n        onChange={ handleChange }\n      />\n    </form>\n  );\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}\n\n","const apiKey = 'qMtD1tALRHFhjCu89VUdCCLC02t85nYL'; //enviroment\n\nexport const getGifs = async ( category ) => { \n  const resp = await fetch(`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=6&api_key=${apiKey}`);\n  const { data } = await resp.json();\n  const gifs = data.map(({ id, title, images: {downsized_medium} }) => {\n    return {\n      id,\n      title,\n      url: downsized_medium.url,\n    }\n  })\n  \n  return gifs;\n}","import React from 'react';\n\nexport const GifGridItem = ( { id, title, url } ) => {\n  return (\n    <div className=\"card animate__animated animate__delay-2s animate__fadeIn\">\n      <img src={ url } alt={ title } />\n      <p>{ title }</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category } ) => {\n\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__delay-2s animate__fadeIn\">{ category }</h3>\n      {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n      <div className=\"card-grid\">\n          { \n            images.map( ( item ) => ( \n              <GifGridItem \n                key={ item.id } \n                { ...item } \n              /> \n            ))\n          }\n      </div>\n    </>\n  );\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = (category) => {\n  const [images, setImages] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category)\n      .then( img => {\n        setImages({\n          data: img,\n          loading: false,\n        });\n      });\n  }, [category]);\n\n  return images;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifApp = () => {\n\n  const [categories, setCategories] = useState(['One Punch']);\n\n  // const handleAdd = () => setCategories( prevState => [...prevState, 'Yasuo'] );\n\n  return(\n    <div className=\"main-container\">\n      <div className=\"header\">\n        <h2>Gif App</h2>\n      </div>\n      <AddCategory setCategories={ setCategories } />\n      <hr />\n      <ul>\n        { \n          categories.map( ( item ) => (\n            <GifGrid \n              key={ item } \n              category={ item } \n            />\n          ))\n        }\n      </ul>\n    </div>\n  );\n}\n\nexport default GifApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport GifApp from './GifApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}